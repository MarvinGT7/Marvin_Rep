EJERCICIO 5:

5.3 Implementar un deque basado en una lista doblemente enlazada. (Véase el Proyecto de Programación 4.3 en el capítulo anterior.) Debe incluir los métodos insertLeft(), insertRight(), removeLeft(), removeRight(), peekLeft(), peekRight() e isEmpty().

Proyecto de Programación 4.3:

Deque.py:

class Deque(object):
    def __init__(self, max_size):
        # Inicializa la deque con un tamaño máximo.
        self.__deque = [None] * max_size
        self.__max_size = max_size
        self.__left = 0  # Índice del extremo izquierdo de la deque
        self.__right = 0 # Índice del extremo derecho de la deque
        self.__size = 0  # Número de elementos en la deque

    def insertLeft(self, item):
        # Inserta un elemento en el extremo izquierdo de la deque.
        if self.isFull():
            raise Exception("Deque está llena")
        self.__left = (self.__left - 1) % self.__max_size  # Envolvimiento al final de la matriz
        self.__deque[self.__left] = item
        self.__size += 1

    def insertRight(self, item):
        # Inserta un elemento en el extremo derecho de la deque.
        if self.isFull():
            raise Exception("Deque está llena")
        self.__deque[self.__right] = item
        self.__right = (self.__right + 1) % self.__max_size  # Envolvimiento al final de la matriz
        self.__size += 1

    def removeLeft(self):
        # Elimina y devuelve el elemento del extremo izquierdo de la deque.
        if self.isEmpty():
            raise Exception("Deque está vacía")
        item = self.__deque[self.__left]
        self.__deque[self.__left] = None  # Elimina la referencia al elemento
        self.__left = (self.__left + 1) % self.__max_size  # Envolvimiento al final de la matriz
        self.__size -= 1
        return item

    def removeRight(self):
        # Elimina y devuelve el elemento del extremo derecho de la deque.
        if self.isEmpty():
            raise Exception("Deque está vacía")
        self.__right = (self.__right - 1) % self.__max_size  # Envolvimiento al final de la matriz
        item = self.__deque[self.__right]
        self.__deque[self.__right] = None  # Elimina la referencia al elemento
        self.__size -= 1
        return item

    def peekLeft(self):
        # Devuelve el elemento del extremo izquierdo sin eliminarlo.
        if self.isEmpty():
            raise Exception("Deque está vacía")
        return self.__deque[self.__left]

    def peekRight(self):
        # Devuelve el elemento del extremo derecho sin eliminarlo.
        if self.isEmpty():
            raise Exception("Deque está vacía")
        return self.__deque[(self.__right - 1) % self.__max_size]

    def isEmpty(self):
        # Verifica si la deque está vacía.
        return self.__size == 0

    def isFull(self):
        # Verifica si la deque está llena.
        return self.__size == self.__max_size

    def __len__(self):
        # Devuelve el número de elementos en la deque.
        return self.__size

    def __str__(self):
        # Devuelve una representación de cadena de la deque.
        return str([self.__deque[(self.__left + i) % self.__max_size] for i in range(self.__size)])




DequeClient.py:

from Deque import Deque

deque = Deque(5)  # Crear una deque con tamaño máximo de 5 elementos

# Insertar elementos en ambos extremos
deque.insertLeft(1)
deque.insertRight(2)
deque.insertLeft(3)
deque.insertRight(4)
deque.insertLeft(5)

print("Contenido del deque después de las inserciones:", deque)

# Intentar insertar en una deque llena
try:
    deque.insertRight(6)
except Exception as e:
    print(e)

# Eliminar elementos de ambos extremos
print("Elemento eliminado desde la izquierda:", deque.removeLeft())
print("Elemento eliminado desde la derecha:", deque.removeRight())

# Ver contenido actual del deque
print("Contenido del deque después de las eliminaciones:", deque)

# Mostrar los elementos en ambos extremos
print("Elemento en el extremo izquierdo:", deque.peekLeft())
print("Elemento en el extremo derecho:", deque.peekRight())

# Comprobar si la deque está vacía o llena
print("¿Está la deque vacía?", deque.isEmpty())
print("¿Está la deque llena?", deque.isFull())





SOLUCION:

Deque.py
class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = None
        self.prev = None

class Deque:
    def __init__(self):
        self.left = None  # Cabeza del deque
        self.right = None  # Cola del deque
        self.size = 0

    def insertLeft(self, item):
        # Inserta un elemento en el extremo izquierdo (cabeza)
        new_node = Node(item)
        if self.isEmpty():
            self.left = self.right = new_node
        else:
            new_node.next = self.left
            self.left.prev = new_node
            self.left = new_node
        self.size += 1

    def insertRight(self, item):
        # Inserta un elemento en el extremo derecho (cola)
        new_node = Node(item)
        if self.isEmpty():
            self.left = self.right = new_node
        else:
            new_node.prev = self.right
            self.right.next = new_node
            self.right = new_node
        self.size += 1

    def removeLeft(self):
        # Elimina y devuelve el elemento del extremo izquierdo
        if self.isEmpty():
            raise Exception("Deque está vacía")
        item = self.left.value
        if self.left == self.right:  # Si solo hay un elemento
            self.left = self.right = None
        else:
            self.left = self.left.next
            self.left.prev = None
        self.size -= 1
        return item

    def removeRight(self):
        # Elimina y devuelve el elemento del extremo derecho
        if self.isEmpty():
            raise Exception("Deque está vacía")
        item = self.right.value
        if self.left == self.right:  # Si solo hay un elemento
            self.left = self.right = None
        else:
            self.right = self.right.prev
            self.right.next = None
        self.size -= 1
        return item

    def peekLeft(self):
        # Devuelve el elemento del extremo izquierdo sin eliminarlo
        if self.isEmpty():
            raise Exception("Deque está vacía")
        return self.left.value

    def peekRight(self):
        # Devuelve el elemento del extremo derecho sin eliminarlo
        if self.isEmpty():
            raise Exception("Deque está vacía")
        return self.right.value

    def isEmpty(self):
        # Verifica si la deque está vacía
        return self.size == 0

    def __len__(self):
        # Devuelve el número de elementos en la deque
        return self.size

    def __str__(self):
        # Devuelve una representación en cadena de la deque
        elements = []
        current = self.left
        while current is not None:
            elements.append(current.value)
            current = current.next
        return str(elements)




DequeClient.py
from Deque import Deque

deque = Deque()  # Crear una deque sin tamaño máximo

# Insertar elementos en ambos extremos
deque.insertLeft(1)
deque.insertRight(2)
deque.insertLeft(3)
deque.insertRight(4)
deque.insertLeft(5)

print("Contenido del deque después de las inserciones:", deque)

# Eliminar elementos de ambos extremos
print("Elemento eliminado desde la izquierda:", deque.removeLeft())
print("Elemento eliminado desde la derecha:", deque.removeRight())

# Ver contenido actual del deque
print("Contenido del deque después de las eliminaciones:", deque)

# Mostrar los elementos en ambos extremos
print("Elemento en el extremo izquierdo:", deque.peekLeft())
print("Elemento en el extremo derecho:", deque.peekRight())

# Comprobar si la deque está vacía
print("¿Está la deque vacía?", deque.isEmpty())
