EJERCICIO 2:

3.2 Añada un método llamado median() a la clase Array en el módulo SortArray.py (listado 3-4). Este método debe devolver el valor mediano de la matriz. (Recuerde que en un grupo de números, la mitad es más grande que la mediana y la otra mitad es más pequeña). Hazlo de la manera más fácil. Haz la prueba en el client. Y las explicaciones de los comentarios en español.

listado 3-4
SortArray.py:
# Implement a sortable Array data structure
class Array(object):
 def __init__(self, initialSize): # Constructor
 self.__a = [None] * initialSize # The array stored as a list
 self.__nItems = 0 # No items in array initially
 def __len__(self): # Special def for len() func
 return self.__nItems # Return number of items
 def get(self, n): # Return the value at index n
 if 0 <= n and n < self.__nItems: # Check if n is in bounds, and
 return self.__a[n] # only return item if in bounds
 def set(self, n, value): # Set the value at index n
 if 0 <= n and n < self.__nItems: # Check if n is in bounds, and
 self.__a[n] = value # only set item if in bounds
 def swap(self, j, k): # Swap the values at 2 indices
 if (0 <= j and j < self.__nItems and # Check if indices are in
 0 <= k and k < self.__nItems): # bounds, before processing
 self.__a[j], self.__a[k] = self.__a[k], self.__a[j]
 def insert(self, item): # Insert item at end
 if self.__nItems >= len(self.__a): # If array is full,
 raise Exception("Array overflow") # raise exception
 self.__a[self.__nItems] = item # Item goes at current end
 self.__nItems += 1 # Increment number of items
 def find(self, item): # Find index for item
 for j in range(self.__nItems): # Among current items
 if self.__a[j] == item: # If found,
 return j # then return index to element
 return -1 # Not found -> return -1
 def search(self, item): # Search for item
 return self.get(self.find(item)) # and return item if found
 def delete(self, item): # Delete first occurrence
 for j in range(self.__nItems): # of an item
 if self.__a[j] == item: # Found item
 self.__nItems -= 1 # One fewer at end
 for k in range(j, self.__nItems): # Move items from
 self.__a[k] = self.__a[k+1] # right over 1
 return True # Return success flag
 return False # Made it here, so couldn't find the item
 def traverse(self, function=print): # Traverse all items
 for j in range(self.__nItems): # and apply a function
 function(self.__a[j])
 def __str__(self): # Special def for str() func
 ans = "[" # Surround with square brackets
 for i in range(self.__nItems): # Loop through items
 if len(ans) > 1: # Except next to left bracket,
 ans += ", " # separate items with comma
 ans += str(self.__a[i]) # Add string form of item
 ans += "]" # Close with right bracket
 return ans
 def bubbleSort(self): # Sort comparing adjacent vals
 for last in range(self.__nItems-1, 0, -1): # and bubble up
 for inner in range(last): # inner loop goes up to last
 if self.__a[inner] > self.__a[inner+1]: # If elem less
 self.swap(inner, inner+1) # than adjacent value, swap
 def selectionSort(self): # Sort by selecting min and
 for outer in range(self.__nItems-1): # swapping min to leftmost
 min = outer # Assume min is leftmost
 for inner in range(outer+1, self.__nItems): # Hunt to right
 if self.__a[inner] < self.__a[min]: # If we find new min,
 min = inner # update the min index
 # __a[min] is smallest among __a[outer]...__a[__nItems-1]
 self.swap(outer, min) # Swap leftmost and min
 def insertionSort(self): # Sort by repeated inserts
 for outer in range(1, self.__nItems): # Mark one element
 temp = self.__a[outer] # Store marked elem in temp
 inner = outer # Inner loop starts at mark
 while inner > 0 and temp < self.__a[inner-1]: # If marked
 self.__a[inner] = self.__a[inner-1] # elem smaller, then
 inner -= 1 # shift elem to right
 self.__a[inner] = temp # Move marked elem to 'hole'



SortArrayClient.py:
from SortArray import *
import random
import timeit
def initArray(size=100, maxValue=100, seed=3.14159):
 """Create an Array of the specified size with a fixed sequence
of
 'random' elements"""
 arr = Array(size) # Create the Array
object
 random.seed(seed) # Set random number
generator
 for i in range(size): # to known state,
then loop
 arr.insert(random.randrange(maxValue)) # Insert random
numbers
 return arr # Return the filled
Array
arr = initArray()
print("Array containing", len(arr), "items:\n", arr)
for test in ['initArray().bubbleSort()',
 'initArray().selectionSort()',
 'initArray().insertionSort()']:
 elapsed = timeit.timeit(test, number=100, globals=globals())
 print(test, "took", elapsed, "seconds", flush=True)
arr.insertionSort()
print('Sorted array contains:\n', arr)




SOLUCION:

SortArray.py
# Implementación de una estructura de datos tipo Array con métodos de ordenamiento
class Array(object):
    def __init__(self, initialSize):  # Constructor de la clase
        # Crear un arreglo de tamaño inicial con elementos `None`
        self.__a = [None] * initialSize
        # Al inicio no hay elementos en el arreglo
        self.__nItems = 0

    def __len__(self):  # Definir la función especial para `len()`
        # Retornar el número actual de elementos en el arreglo
        return self.__nItems

    def get(self, n):  # Retorna el valor en el índice `n`
        # Verifica si `n` está dentro de los límites válidos y retorna el valor solo si es así
        if 0 <= n < self.__nItems:
            return self.__a[n]

    def set(self, n, value):  # Establece el valor en el índice `n`
        # Verifica si `n` está dentro de los límites válidos y asigna el valor solo si es así
        if 0 <= n < self.__nItems:
            self.__a[n] = value

    def swap(self, j, k):  # Intercambia los valores en los índices `j` y `k`
        # Verifica si ambos índices están dentro de los límites antes de procesar
        if (0 <= j < self.__nItems and 0 <= k < self.__nItems):
            # Intercambia los elementos
            self.__a[j], self.__a[k] = self.__a[k], self.__a[j]

    def insert(self, item):  # Inserta un elemento al final del arreglo
        # Si el arreglo está lleno, lanza una excepción
        if self.__nItems >= len(self.__a):
            raise Exception("Array overflow")
        # Coloca el nuevo elemento al final del arreglo
        self.__a[self.__nItems] = item
        # Incrementa el conteo de elementos
        self.__nItems += 1

    def find(self, item):  # Busca el índice de un elemento en el arreglo
        # Recorre los elementos actuales
        for j in range(self.__nItems):
            if self.__a[j] == item:  # Si encuentra el elemento, retorna el índice
                return j
        return -1  # Si no se encuentra, retorna -1

    def search(self, item):  # Busca un elemento y retorna su valor si existe
        # Llama al método `find()` y retorna el valor si lo encuentra
        return self.get(self.find(item))

    def delete(self, item):  # Elimina la primera ocurrencia de un elemento
        # Recorre los elementos actuales
        for j in range(self.__nItems):
            if self.__a[j] == item:  # Si encuentra el elemento
                self.__nItems -= 1  # Reduce el conteo de elementos
                for k in range(j, self.__nItems):  # Mueve los elementos a la izquierda
                    self.__a[k] = self.__a[k+1]
                return True  # Retorna éxito si se eliminó
        return False  # Retorna False si no se encontró el elemento

    def traverse(self, function=print):  # Recorre todos los elementos
        # Aplica la función dada a cada elemento en el arreglo
        for j in range(self.__nItems):
            function(self.__a[j])

    def __str__(self):  # Definir la función especial para `str()`
        # Rodea los elementos con corchetes y separa con comas
        ans = "["
        for i in range(self.__nItems):
            if len(ans) > 1:
                ans += ", "
            ans += str(self.__a[i])
        ans += "]"
        return ans

    def bubbleSort(self):  # Ordena comparando valores adyacentes
        # Recorre los elementos desde el final hasta el inicio
        for last in range(self.__nItems-1, 0, -1):
            # El bucle interno recorre hasta el índice `last`
            for inner in range(last):
                # Si el elemento actual es mayor que el siguiente, los intercambia
                if self.__a[inner] > self.__a[inner+1]:
                    self.swap(inner, inner+1)

    def selectionSort(self):  # Ordena seleccionando el mínimo y colocándolo a la izquierda
        # Recorre desde el inicio hasta el penúltimo elemento
        for outer in range(self.__nItems-1):
            min = outer  # Suponemos que el mínimo es el primer elemento
            for inner in range(outer+1, self.__nItems):  # Busca hacia la derecha
                if self.__a[inner] < self.__a[min]:  # Si encuentra un nuevo mínimo, lo actualiza
                    min = inner
            self.swap(outer, min)  # Intercambia el mínimo con el elemento actual

    def insertionSort(self):  # Ordena mediante inserciones repetidas
        # Comienza desde el segundo elemento y recorre el arreglo
        for outer in range(1, self.__nItems):
            temp = self.__a[outer]  # Almacena el elemento actual
            inner = outer  # El bucle interno comienza en la posición `outer`
            while inner > 0 and temp < self.__a[inner-1]:  # Mientras el elemento sea menor
                self.__a[inner] = self.__a[inner-1]  # Desplaza los elementos a la derecha
                inner -= 1
            self.__a[inner] = temp  # Coloca el elemento en su posición correcta

    def median(self):  # Método para calcular la mediana
        # Si el arreglo está vacío, devolver None
        if self.__nItems == 0:
            return None

        # Hacemos una copia del arreglo y lo ordenamos
        sorted_array = sorted(self.__a[:self.__nItems])

        # Calculamos la posición del elemento central
        mid = self.__nItems // 2

        # Si el número de elementos es impar, la mediana es el elemento central
        if self.__nItems % 2 == 1:
            return sorted_array[mid]

        # Si el número de elementos es par, la mediana es el promedio de los dos centrales
        else:
            return (sorted_array[mid - 1] + sorted_array[mid]) / 2




SortArrayClient.py:
from SortArray import *
import random
import timeit

def initArray(size=100, maxValue=100, seed=3.14159):
    """Crear un arreglo de tamaño especificado con una secuencia
    fija de elementos aleatorios."""
    # Crear el objeto Array con el tamaño dado
    arr = Array(size)
    # Establecer la semilla para el generador de números aleatorios
    random.seed(seed)
    # Insertar números aleatorios en el arreglo
    for i in range(size):
        arr.insert(random.randrange(maxValue))
    return arr  # Devolver el arreglo lleno

# Inicializar el arreglo y mostrar su contenido
arr = initArray()
print("Array containing", len(arr), "items:\n", arr)

# Probar los métodos de ordenamiento y medir el tiempo que toman
for test in ['initArray().bubbleSort()', 'initArray().selectionSort()', 'initArray().insertionSort()']:
    # Ejecuta cada prueba 100 veces y mide el tiempo total
    elapsed = timeit.timeit(test, number=100, globals=globals())
    print(test, "took", elapsed, "seconds", flush=True)

# Ordenar el arreglo y mostrarlo
arr.insertionSort()
print('Sorted array contains:\n', arr)

# Calcular y mostrar la mediana del arreglo
print('Median of the array is:', arr.median())

